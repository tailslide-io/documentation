"use strict";(self.webpackChunktailslide_documentation=self.webpackChunktailslide_documentation||[]).push([[240],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>m});var n=a(7294);function l(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){l(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,l=function(e,t){if(null==e)return{};var a,n,l={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(l[a]=e[a]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(l[a]=e[a])}return l}var s=n.createContext({}),u=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},p=function(e){var t=u(e.components);return n.createElement(s.Provider,{value:t},e.children)},g={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,l=e.mdxType,r=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),d=u(a),m=l,c=d["".concat(s,".").concat(m)]||d[m]||g[m]||r;return a?n.createElement(c,i(i({ref:t},p),{},{components:a})):n.createElement(c,i({ref:t},p))}));function m(e,t){var a=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=a.length,i=new Array(r);i[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:l,i[1]=o;for(var u=2;u<r;u++)i[u]=a[u];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},5940:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>b,contentTitle:()=>N,default:()=>C,frontMatter:()=>h,metadata:()=>v,toc:()=>y});var n=a(7462),l=a(7294),r=a(3905),i=a(6010),o=a(2389),s=a(7392),u=a(7094),p=a(2466);const g="tabList__CuJ",d="tabItem_LNqP";function m(e){var t,a;const{lazy:r,block:o,defaultValue:m,values:c,groupId:k,className:f}=e,h=l.Children.map(e.children,(e=>{if((0,l.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),N=null!=c?c:h.map((e=>{let{props:{value:t,label:a,attributes:n}}=e;return{value:t,label:a,attributes:n}})),v=(0,s.l)(N,((e,t)=>e.value===t.value));if(v.length>0)throw new Error('Docusaurus error: Duplicate values "'+v.map((e=>e.value)).join(", ")+'" found in <Tabs>. Every value needs to be unique.');const b=null===m?m:null!=(t=null!=m?m:null==(a=h.find((e=>e.props.default)))?void 0:a.props.value)?t:h[0].props.value;if(null!==b&&!N.some((e=>e.value===b)))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+b+'" but none of its children has the corresponding value. Available values are: '+N.map((e=>e.value)).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");const{tabGroupChoices:y,setTabGroupChoices:T}=(0,u.U)(),[C,w]=(0,l.useState)(b),S=[],{blockElementScrollPositionUntilNextRender:I}=(0,p.o5)();if(null!=k){const e=y[k];null!=e&&e!==C&&N.some((t=>t.value===e))&&w(e)}const F=e=>{const t=e.currentTarget,a=S.indexOf(t),n=N[a].value;n!==C&&(I(t),w(n),null!=k&&T(k,String(n)))},_=e=>{var t;let a=null;switch(e.key){case"ArrowRight":{var n;const t=S.indexOf(e.currentTarget)+1;a=null!=(n=S[t])?n:S[0];break}case"ArrowLeft":{var l;const t=S.indexOf(e.currentTarget)-1;a=null!=(l=S[t])?l:S[S.length-1];break}}null==(t=a)||t.focus()};return l.createElement("div",{className:(0,i.Z)("tabs-container",g)},l.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":o},f)},N.map((e=>{let{value:t,label:a,attributes:r}=e;return l.createElement("li",(0,n.Z)({role:"tab",tabIndex:C===t?0:-1,"aria-selected":C===t,key:t,ref:e=>S.push(e),onKeyDown:_,onFocus:F,onClick:F},r,{className:(0,i.Z)("tabs__item",d,null==r?void 0:r.className,{"tabs__item--active":C===t})}),null!=a?a:t)}))),r?(0,l.cloneElement)(h.filter((e=>e.props.value===C))[0],{className:"margin-top--md"}):l.createElement("div",{className:"margin-top--md"},h.map(((e,t)=>(0,l.cloneElement)(e,{key:t,hidden:e.props.value!==C})))))}function c(e){const t=(0,o.Z)();return l.createElement(m,(0,n.Z)({key:String(t)},e))}const k="tabItem_Ymn6";function f(e){let{children:t,hidden:a,className:n}=e;return l.createElement("div",{role:"tabpanel",className:(0,i.Z)(k,n),hidden:a},t)}const h={sidebar_position:1},N="SDK for Tailslide",v={unversionedId:"Integrating SDKs/Tailslide-SDK",id:"Integrating SDKs/Tailslide-SDK",title:"SDK for Tailslide",description:"---",source:"@site/docs/3 - Integrating SDKs/Tailslide-SDK.md",sourceDirName:"3 - Integrating SDKs",slug:"/Integrating SDKs/Tailslide-SDK",permalink:"/documentation/Integrating SDKs/Tailslide-SDK",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"SDK key",permalink:"/documentation/Getting Started/SDK-key"},next:{title:"Docker",permalink:"/documentation/Customization/Docker"}},b={},y=[{value:"Installation",id:"installation",level:2},{value:"Basic Usage",id:"basic-usage",level:2},{value:"Instantiating and Initializing FlagManager",id:"instantiating-and-initializing-flagmanager",level:3},{value:"Using Feature Flag with Toggler",id:"using-feature-flag-with-toggler",level:3},{value:"Emitting Success or Failture",id:"emitting-success-or-failture",level:3},{value:"Documentation",id:"documentation",level:2},{value:"FlagManager",id:"flagmanager",level:3},{value:"FlagManager Constructor",id:"flagmanager-constructor",level:4},{value:"Instance Methods",id:"instance-methods",level:4},{value:"<code>flagmanager.initialize()</code>",id:"flagmanagerinitialize",level:5},{value:"<code>FlagManager.prototype.setUserContext(newUserContext)</code>",id:"flagmanagerprototypesetusercontextnewusercontext",level:5},{value:"<code>FlagManager.prototype.getUserContext()</code>",id:"flagmanagerprototypegetusercontext",level:5},{value:"<code>FlagManager.prototype.newToggler(options)</code>",id:"flagmanagerprototypenewtoggleroptions",level:5},{value:"<code>FlagManager.prototype.disconnect()</code>",id:"flagmanagerprototypedisconnect",level:5},{value:"Toggler",id:"toggler",level:3},{value:"Instance Methods",id:"instance-methods-1",level:4},{value:"<code>Toggler.prototype.isFlagActive()</code>",id:"togglerprototypeisflagactive",level:5},{value:"<code>Toggler.prototype.emitSuccess()</code>",id:"togglerprototypeemitsuccess",level:5},{value:"<code>Toggler.prototype.emitFailure()</code>",id:"togglerprototypeemitfailure",level:5}],T={toc:y};function C(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},T,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"sdk-for-tailslide"},"SDK for Tailslide"),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"installation"},"Installation"),(0,r.kt)("hr",null),(0,r.kt)("p",null,"Install the Tailslide npm package with ",(0,r.kt)("inlineCode",{parentName:"p"},"npm install tailslide")),(0,r.kt)("h2",{id:"basic-usage"},"Basic Usage"),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"instantiating-and-initializing-flagmanager"},"Instantiating and Initializing FlagManager"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"FlagManager"),"class is the entry point of this SDK. It is responsible for retrieving all the flag rulesets for a given app with its ",(0,r.kt)("inlineCode",{parentName:"p"},"appId")," and creating new ",(0,r.kt)("inlineCode",{parentName:"p"},"Toggler")," instances to handle toggling of feature flags within that app. To instantiate a ",(0,r.kt)("inlineCode",{parentName:"p"},"FlagManager")," object, a user must provide a configuration object:"),(0,r.kt)(c,{mdxType:"Tabs"},(0,r.kt)(f,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const FlagManager = require('tailslide');\n\nconst config = {\n  natsServer: 'nats://localhost:4222',\n  natsStream: 'flags_ruleset',\n  appId: 1,\n  userContext: '375d39e6-9c3f-4f58-80bd-e5960b710295',\n  sdkKey: 'myToken',\n  redisHost: 'http://localhost',\n  redisPort: 6379,\n};\n\nconst manager = new FlagManager(config);\nawait manager.initialize();\n"))),(0,r.kt)(f,{value:"py",label:"Python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},'import asyncio\nfrom tailslide import FlagManager\n\nconfig = {\n    "nats_server": "nats://localhost:4222",\n    "nats_stream": "flags_ruleset",\n    "app_id": 1,\n    "user_context": "375d39e6-9c3f-4f58-80bd-e5960b710295",\n    "sdk_key": "myToken",\n    "redis_host": "http://localhost",\n    "redis_port": 6379,\n}\n\nasync def main():\n    manager = FlagManager(**config)\n    await manager.initialize()\n\nasyncio.run(main())\n'))),(0,r.kt)(f,{value:"rb",label:"Ruby",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rb"},'require "async"\nrequire(\'tailslide\')\n\nconfig = {\n    nats_server: "nats://localhost:4222",\n    nats_stream: "flags_ruleset",\n    app_id: 1,\n    user_context: "375d39e6-9c3f-4f58-80bd-e5960b710295",\n    sdk_key: "myToken",\n    redis_host: "http://localhost",\n    redis_port: 6379,\n}\n\nAsync do |task|\n    manager = FlagManager.new(**config)\n    manager.initialize_flags\n\nend\n'))),(0,r.kt)(f,{value:"go",label:"Golang",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'import (\n    tailslide "github.com/tailslide-io/tailslide.go"\n)\n\nfunc main(){\n  config := tailslide.FlagManagerConfig{\n    NatsServer:  "nats://localhost:4222",\n    NatsStream:  "flags_ruleset",\n    AppId:       "1",\n    UserContext: "375d39e6-9c3f-4f58-80bd-e5960b710295",\n    SdkKey:      "myToken",\n    RedisHost:   "http://localhost",\n    RedisPort:   "6379",\n  }\n\n  manager := tailslide.NewFlagManager(config)\n  manager.InitializeFlags()\n}\n')))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"natsServer")," is the NATS JetStream server ",(0,r.kt)("inlineCode",{parentName:"li"},"address:port")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"natsStream")," is the NATS JetStream\u2019s stream name that stores all the apps and their flag rulesets"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"appId")," is the ID number of the app the user wants to retrieve its flag ruleset from"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"userContext")," is the UUID string that identifies the current user"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"sdkKey")," is the SDK key for the Tailslide, it is used as a password for NATS JetStream token authentication"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"redisHost")," is the address to the Redis database"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"redisPort")," is the port number that the Redis database runs on")),(0,r.kt)("p",null,"After instantiating a ",(0,r.kt)("inlineCode",{parentName:"p"},"FlagManager"),", invoke the ",(0,r.kt)("inlineCode",{parentName:"p"},"initialize")," method. This method connects the ",(0,r.kt)("inlineCode",{parentName:"p"},"FlagManager")," instance to both NATS JetStream and Redis Timeseries, and asynchronously retrieves the latest and any new flag ruleset data."),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"using-feature-flag-with-toggler"},"Using Feature Flag with Toggler"),(0,r.kt)("p",null,"Once the ",(0,r.kt)("inlineCode",{parentName:"p"},"FlagManager")," is initialized, it can create a ",(0,r.kt)("inlineCode",{parentName:"p"},"Toggler"),", with the ",(0,r.kt)("inlineCode",{parentName:"p"},"newToggler")," method, for each feature flag that the developer wants to wrap the new and old features in. A ",(0,r.kt)("inlineCode",{parentName:"p"},"Toggler"),"\u2019s ",(0,r.kt)("inlineCode",{parentName:"p"},"isFlagActive")," method checks whether the flag with its ",(0,r.kt)("inlineCode",{parentName:"p"},"flagName")," is active or not based on the flag ruleset. A ",(0,r.kt)("inlineCode",{parentName:"p"},"Toggler"),"\u2019s ",(0,r.kt)("inlineCode",{parentName:"p"},"isFlagActive")," method returns a boolean value, which can be used to evaluate whether a new feature should be used or not."),(0,r.kt)(c,{mdxType:"Tabs"},(0,r.kt)(f,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const flagConfig = {\n  flagName: 'App 1 Flag 1',\n};\n\nconst flagToggler = manager.newToggler(flagConfig);\n\nif (flagToggler.isFlagActive()) {\n  // call new feature here\n} else {\n  // call old feature here\n}\n"))),(0,r.kt)(f,{value:"py",label:"Python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"flag_config = {\n    \"flag_name\": 'App 1 Flag 1',\n}\n\nflag_toggler = manager.new_toggler(flag_config)\n\nif flag_toggler.is_flag_active():\n    # call new feature here\nelse:\n    # call old feature here\n"))),(0,r.kt)(f,{value:"rb",label:"Ruby",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rb"},"flag_config = {\n    flag_name: 'App 1 Flag 1',\n}\n\nflag_toggler = manager.new_toggler(flag_config)\n\nif flag_toggler.is_flag_active\n    # call new feature here\nelse\n    # call old feature here\nend\n"))),(0,r.kt)(f,{value:"go",label:"Golang",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'flagConfig := tailslide.TogglerConfig{\n  FlagName: "App 1 Flag 1",\n}\n\nflagToggler, err := manager.NewToggler(flagConfig)\nif flagToggler.IsFlagActive() {\n  // call new feature here\n} else {\n  // call old feature here\n}\n')))),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"emitting-success-or-failture"},"Emitting Success or Failture"),(0,r.kt)("p",null,"To use a ",(0,r.kt)("inlineCode",{parentName:"p"},"Toggler")," instance to record successful or failed operations, call its ",(0,r.kt)("inlineCode",{parentName:"p"},"emitSuccess")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"emitFailure")," methods:"),(0,r.kt)(c,{mdxType:"Tabs"},(0,r.kt)(f,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"if (successCondition) {\n  await flagToggler.emitSuccess();\n} else {\n  await flagToggler.emitFailure();\n}\n"))),(0,r.kt)(f,{value:"py",label:"Python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"if successCondition:\n    flag_toggler.emit_success()\nelse:\n    flag_toggler.emit_failure()\n"))),(0,r.kt)(f,{value:"rb",label:"Ruby",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rb"},"if successCondition\n    flag_toggler.emit_success\nelse\n    flag_toggler.emit_failure\nend\n"))),(0,r.kt)(f,{value:"go",label:"Golang",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"if successCondition {\n  flagToggler.EmitSuccess()\n} else {\n  flagToggler.EmitFailure()\n}\n")))),(0,r.kt)("h2",{id:"documentation"},"Documentation"),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"flagmanager"},"FlagManager"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"FlagManager")," class is the entry point of the SDK. A new ",(0,r.kt)("inlineCode",{parentName:"p"},"FlagManager")," object will need to be created for each app."),(0,r.kt)("h4",{id:"flagmanager-constructor"},"FlagManager Constructor"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"An object with the following keys",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"natsServer")," is the NATS JetStream server ",(0,r.kt)("inlineCode",{parentName:"li"},"address:port")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"natsStream")," is the NATS JetStream\u2019s stream name that stores all the apps and their flag rulesets"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"appId")," a number representing the application the microservice belongs to"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"sdkKey")," a string generated via the Tower front-end for NATS JetStream authentication"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"userContext")," a string representing the user\u2019s UUID"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"redisHost")," a string that represents the url of the Redis server"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"redisPort")," a number that represents the port number of the Redis server")))),(0,r.kt)("hr",null),(0,r.kt)("h4",{id:"instance-methods"},"Instance Methods"),(0,r.kt)("h5",{id:"flagmanagerinitialize"},(0,r.kt)("inlineCode",{parentName:"h5"},"flagmanager.initialize()")),(0,r.kt)("p",null,"Asynchronously initialize ",(0,r.kt)("inlineCode",{parentName:"p"},"flagmanager")," connections to NATS JetStream and Redis database"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"null"))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Value:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"null"))),(0,r.kt)("hr",null),(0,r.kt)("h5",{id:"flagmanagerprototypesetusercontextnewusercontext"},(0,r.kt)("inlineCode",{parentName:"h5"},"FlagManager.prototype.setUserContext(newUserContext)")),(0,r.kt)("p",null,"Set the current user's context for the ",(0,r.kt)("inlineCode",{parentName:"p"},"flagmanager")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"newUserContext"),": A UUID string that represents the current active user")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Value:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"null"))),(0,r.kt)("hr",null),(0,r.kt)("h5",{id:"flagmanagerprototypegetusercontext"},(0,r.kt)("inlineCode",{parentName:"h5"},"FlagManager.prototype.getUserContext()")),(0,r.kt)("p",null,"Returns the current user context"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"null"))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Value:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The UUID string that represents the current active user")),(0,r.kt)("hr",null),(0,r.kt)("h5",{id:"flagmanagerprototypenewtoggleroptions"},(0,r.kt)("inlineCode",{parentName:"h5"},"FlagManager.prototype.newToggler(options)")),(0,r.kt)("p",null,"Creates a new toggler to check for a feature flag's status from the current app's flag ruleset by the flag's name."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"options"),": An object with key of ",(0,r.kt)("inlineCode",{parentName:"li"},"flagName")," and a string value representing the name of the feature flag for the new toggler to check whether the new feature is enabled")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Value:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"A ",(0,r.kt)("inlineCode",{parentName:"li"},"Toggler")," object")),(0,r.kt)("hr",null),(0,r.kt)("h5",{id:"flagmanagerprototypedisconnect"},(0,r.kt)("inlineCode",{parentName:"h5"},"FlagManager.prototype.disconnect()")),(0,r.kt)("p",null,"Asynchronously disconnects the ",(0,r.kt)("inlineCode",{parentName:"p"},"FlagManager")," instance from NATS JetStream and Redis database"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"null"))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Value:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"null"))),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"toggler"},"Toggler"),(0,r.kt)("p",null,"The Toggler class provides methods that determine whether or not new feature code is run and handles success/failure emissions. Each toggler handles one feature flag, and is created by ",(0,r.kt)("inlineCode",{parentName:"p"},"FlagManager.prototype.newToggler()"),"."),(0,r.kt)("hr",null),(0,r.kt)("h4",{id:"instance-methods-1"},"Instance Methods"),(0,r.kt)("h5",{id:"togglerprototypeisflagactive"},(0,r.kt)("inlineCode",{parentName:"h5"},"Toggler.prototype.isFlagActive()")),(0,r.kt)("p",null,"Checks for flag status, whitelisted users, and rollout percentage in that order to determine whether the new feature is enabled."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"If the flag's active status is false, the function returns ",(0,r.kt)("inlineCode",{parentName:"li"},"false")),(0,r.kt)("li",{parentName:"ul"},"If current user's UUID is in the whitelist of users, the function returns ",(0,r.kt)("inlineCode",{parentName:"li"},"true")),(0,r.kt)("li",{parentName:"ul"},"If current user's UUID hashes to a value within user rollout percentage, the function returns ",(0,r.kt)("inlineCode",{parentName:"li"},"true")),(0,r.kt)("li",{parentName:"ul"},"If current user's UUID hashes to a value outside user rollout percentage, the function returns ",(0,r.kt)("inlineCode",{parentName:"li"},"false"))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"null"))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Value")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"true")," or ",(0,r.kt)("inlineCode",{parentName:"li"},"false")," depending on whether the feature flag is active")),(0,r.kt)("hr",null),(0,r.kt)("h5",{id:"togglerprototypeemitsuccess"},(0,r.kt)("inlineCode",{parentName:"h5"},"Toggler.prototype.emitSuccess()")),(0,r.kt)("p",null,"Records a successful operation to the Redis Timeseries database, with key ",(0,r.kt)("inlineCode",{parentName:"p"},"flagId:success")," and value of current timestamp"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"null"))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Value")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"null"))),(0,r.kt)("hr",null),(0,r.kt)("h5",{id:"togglerprototypeemitfailure"},(0,r.kt)("inlineCode",{parentName:"h5"},"Toggler.prototype.emitFailure()")),(0,r.kt)("p",null,"Records a failure operation to the Redis Timeseries database, with key ",(0,r.kt)("inlineCode",{parentName:"p"},"flagId:success")," and value of current timestamp"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"null"))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Value")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"null"))))}C.isMDXComponent=!0}}]);