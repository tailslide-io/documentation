"use strict";(self.webpackChunktailslide_documentation=self.webpackChunktailslide_documentation||[]).push([[206],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>m});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),d=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},p=function(e){var t=d(e.components);return n.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=d(r),m=a,f=u["".concat(s,".").concat(m)]||u[m]||c[m]||i;return r?n.createElement(f,o(o({ref:t},p),{},{components:r})):n.createElement(f,o({ref:t},p))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var d=2;d<i;d++)o[d]=r[d];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},2970:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>c,frontMatter:()=>i,metadata:()=>l,toc:()=>d});var n=r(7462),a=(r(7294),r(3905));const i={sidebar_position:3},o="Aerobat",l={unversionedId:"Additional Documentation/Aerobat",id:"Additional Documentation/Aerobat",title:"Aerobat",description:"Usage",source:"@site/docs/5 - Additional Documentation/Aerobat.md",sourceDirName:"5 - Additional Documentation",slug:"/Additional Documentation/Aerobat",permalink:"/documentation/Additional Documentation/Aerobat",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Tower",permalink:"/documentation/Additional Documentation/Tower"}},s={},d=[{value:"Usage",id:"usage",level:2},{value:"Run the app individually",id:"run-the-app-individually",level:2},{value:"NATS JetStream and Redis Timeseries Database",id:"nats-jetstream-and-redis-timeseries-database",level:2}],p={toc:d};function c(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"aerobat"},"Aerobat"),(0,a.kt)("h2",{id:"usage"},"Usage"),(0,a.kt)("p",null,"Aerobat is responsible for querying the Redis Timeseries database for each live circuit within an application, to evaluate current error rates against developer-configured error thresholds."),(0,a.kt)("p",null,"Tailslide\u2019s SDK clients (installed in the user application) will record successful and failed operation attempts to the Redis Timeseries database."),(0,a.kt)("p",null,"Aerobat will poll the Redis Timeseries database at a developer-defined interval in order to calculate the error rate percentage in each feature flag over a developer-defined window of time. It will compare that percentage to a user-defined error threshold percentage. If the error rate percentage is larger than specified, the circuit is tripped open."),(0,a.kt)("p",null,"Once a circuit is tripped open, Aerobat will wait a developer-defined amount of time before attempting to expose users to the feature again. Once that time has passed, users will be directed to the feature at a developer-defined \u2018Recovery Increment\u2019 percentage until the feature is available to the desired number of users."),(0,a.kt)("p",null,"Note: all developer-defined variables can be specified via ",(0,a.kt)("inlineCode",{parentName:"p"},"Tower")," front-end"),(0,a.kt)("h2",{id:"run-the-app-individually"},"Run the app individually"),(0,a.kt)("p",null,"Clone main branch of repository"),(0,a.kt)("p",null,"Sample ",(0,a.kt)("inlineCode",{parentName:"p"},".env")," file to add into the root directory"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"SDK_KEY='myToken'\nNATS_SERVER='nats://127.0.0.1:4222'\nNATS_STREAM='flags_ruleset'\nNATS_SUBJECT=\"apps.*.update.manual\" \n\nREDIS_SERVER='{\"socket\":{\"host\":\"localhost\"}}' \nREDIS_POLL_RATE=3000\nREDIS_TIME_WINDOW=3000\n")),(0,a.kt)("p",null,"Within the root directory run ",(0,a.kt)("inlineCode",{parentName:"p"},"npm install"),"\nRun ",(0,a.kt)("inlineCode",{parentName:"p"},"npm start")),(0,a.kt)("h2",{id:"nats-jetstream-and-redis-timeseries-database"},"NATS JetStream and Redis Timeseries Database"),(0,a.kt)("p",null,"Both a NATS JetStream and a Redis Timeseries Database will need to be running. See instructions in Tailslide ",(0,a.kt)("inlineCode",{parentName:"p"},"Tower")," README for how to start each."))}c.isMDXComponent=!0}}]);